name: Build (Main)

on:
  workflow_dispatch:

jobs:
  checkout-full-src:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'

      - run: go version

      - name: Checkout dae latest
        uses: actions/checkout@v4
        with:
          repository: daeuniverse/dae
          ref: main
          submodules: 'recursive'
          fetch-depth: 0

      - name: Checkout dae-wing latest
        uses: actions/checkout@v4
        with:
          repository: daeuniverse/dae-wing
          ref: main
          path: dae-wing
          fetch-depth: 0

      - name: Download dependencies
        run: |
          git submodule update --init --recursive
          export GOMODCACHE="${PWD}/go-mod"
          go mod download -modcacherw
          if [ -d "dae-core" ]; then
            cd dae-core && go mod download -modcacherw && cd ..
          fi
          find "$GOMODCACHE" -maxdepth 1 ! -name "cache" ! -name "go-mod" -exec rm -rf {} \; || true
          if [ -f Makefile ]; then
            sed -i 's/#export GOMODCACHE=$(PWD)\/go-mod/export GOMODCACHE=$(PWD)\/go-mod/' Makefile || true
          fi

      - name: Create full source ZIP archive
        run: zip -9vr daed-full-src.zip . -x .git/\*

      - name: Upload artifact - full source
        uses: actions/upload-artifact@v4
        with:
          name: daed-full-src.zip
          path: daed-full-src.zip

  build-web:
    runs-on: ubuntu-latest
    needs: checkout-full-src
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3.0.0
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: latest

      - name: Build Web UI
        run: |
          pnpm install
          pnpm build

      - name: Upload artifact - web
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: dist

  build-bundle:
    needs: [build-web]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux]
        goarch: [386, riscv64, amd64, arm64, arm, mips, mips64, mipsle, mips64le]
        include:
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          - goos: linux
            goarch: amd64
            goamd64: v1
          - goos: linux
            goarch: amd64
            goamd64: v2
          - goos: linux
            goarch: amd64
            goamd64: v3

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version
        id: get_version
        run: |
          date=$(git log -1 --format="%cd" --date=short | sed 's/-//g')
          count=$(git rev-list --count HEAD)
          commit=$(git rev-parse --short HEAD)
          package_version="${date}r${count}${commit}"
          version="unstable-$package_version"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Get Filename
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOAMD64\"].friendlyName" -r < install/friendly-filenames.json)
          echo "BUNDLE_NAME=daed-$_NAME" >> $GITHUB_OUTPUT

      - name: Download Web Artifact
        uses: actions/download-artifact@v4
        with:
          name: web
          path: dist/

      # ✅ 修复 anytls 缺失问题的关键部分
      - name: Build Binary Bundle
        run: |
          set -euo pipefail
          mkdir -p ./bundled/
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          export GOFLAGS="-trimpath -modcacherw"
          export OUTPUT=bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }}

          echo "=== Building for GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} GOAMD64=${GOAMD64} ==="

          # 默认关闭 CGO / anytls
          export CGO_ENABLED=0
          export ENABLE_ANYTLS=0

          # ✅ 对 amd64 和 arm64 启用 anytls 支持
          if [ "${GOARCH}" = "amd64" ] || [ "${GOARCH}" = "arm64" ]; then
            echo "=> Enabling CGO + anytls"
            sudo apt-get update -y
            sudo apt-get install -y build-essential ca-certificates
            export CGO_ENABLED=1
            export ENABLE_ANYTLS=1
            if [ "${GOARCH}" = "arm64" ]; then
              echo "=> Installing aarch64 cross compiler"
              sudo apt-get install -y gcc-aarch64-linux-gnu
              export CC=aarch64-linux-gnu-gcc
            fi
          fi

          echo "Environment summary:"
          echo "  CGO_ENABLED=$CGO_ENABLED"
          echo "  ENABLE_ANYTLS=$ENABLE_ANYTLS"
          echo "  CC=${CC:-gcc}"

          # 构建
          make -j$(nproc)

          # 打包附属文件
          cp ./install/daed.service ./bundled/ || true
          curl -fsSL -o ./bundled/geoip.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geoip.dat
          curl -fsSL -o ./bundled/geosite.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geosite.dat

      - name: Upload artifact - bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_filename.outputs.BUNDLE_NAME }}
          path: bundled/*

      - name: Build Linux Packages
        run: |
          sudo apt update -y
          sudo apt install -y libarchive-tools rpm ruby-full build-essential
          sudo gem install fpm -v 1.15.1 --no-document || true
          pushd bundled
          for package_manager in deb rpm; do
            if [ "$package_manager" == "deb" ]; then
              if [ "$GOARCH" == "arm" ] && [ "$GOARM" == "7" ]; then
                package_arch="armhf"
              else
                package_arch="$GOARCH"
              fi
            elif [ "$package_manager" == "rpm" ]; then
              if [ "$GOARCH" == "arm" ] && [ "$GOARM" == "7" ]; then
                package_arch="armhfp"
              else
                package_arch="$GOARCH"
              fi
            fi
            fpm -s dir -t "$package_manager" -a $package_arch --version "${PACKAGE_VERSION}" \
              --url 'https://github.com/daeuniverse/dae' \
              --description "daed, A Modern Dashboard For dae." \
              --maintainer "daed@dae.v2raya.org" \
              --name daed --license 'MIT AGPL' \
              --package daed-linux-$GOARCH$GOAMD64$GOARM.$package_manager \
              --after-install ../install/package_after_install.sh \
              --after-remove ../install/package_after_remove.sh \
              ./geoip.dat=/usr/share/daed/geoip.dat \
              ./geosite.dat=/usr/share/daed/geosite.dat \
              ./daed.service=/usr/lib/systemd/system/daed.service \
              ./${{ steps.get_filename.outputs.BUNDLE_NAME }}=/usr/bin/daed
          done
          popd || exit 1
          cp bundled/daed-linux-$GOARCH$GOAMD64$GOARM.deb installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
          cp bundled/daed-linux-$GOARCH$GOAMD64$GOARM.rpm installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
          ls | grep -E ".deb|.rpm"

      - name: Upload Linux packages
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2.0
        with:
          path: |
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
