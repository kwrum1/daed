name: Build (Main) - Simplified

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - '.github/workflows/pr-build.yml'
      - 'install/friendly-filenames.json'
      - 'Makefile'
      - 'index.html'
      - 'vite.config.ts'
      - '.npmrc'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  checkout-full-src:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'

      - run: go version

      - name: Checkout dae latest
        uses: actions/checkout@v4
        with:
          repository: daeuniverse/dae
          ref: main
          submodules: 'recursive'
          fetch-depth: 0

      - name: Download dependencies
        run: |
          git submodule update --init --recursive
          export GOMODCACHE="${PWD}/go-mod"
          go mod download -modcacherw
          if [ -d "dae-core" ]; then
            cd dae-core && go mod download -modcacherw && cd ..
          fi
          find "$GOMODCACHE" -maxdepth 1 ! -name "cache" ! -name "go-mod" -exec rm -rf {} \;
          if [ -f Makefile ]; then
            sed -i 's/#export GOMODCACHE=$(PWD)\/go-mod/export GOMODCACHE=$(PWD)\/go-mod/' Makefile || true
          fi

      - name: Create full source ZIP archive and Signature
        run: zip -9vr daed-full-src.zip . -x .git/\*

      - name: Upload artifact - full source
        uses: actions/upload-artifact@v4
        with:
          name: daed-full-src.zip
          path: daed-full-src.zip

  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3.0.0
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: latest

      - name: Build
        run: |
          pnpm install
          pnpm build

      - name: Upload artifact - web
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: dist

  build-bundle:
    needs: [build-web]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux]
        goarch: [amd64, arm64, arm]
        include:
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: amd64
            goamd64: v1

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'

      - run: go version

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        env:
          REF: ${{ github.ref }}
        run: |
          if [[ "$REF" == "refs/tags/v"* ]]; then
            tag=${REF##*/}
            version=${tag}
            package_version="${tag:1}"
          else
            date=$(git log -1 --format="%cd" --date=short | sed s/-//g)
            count=$(git rev-list --count HEAD)
            commit=$(git rev-parse --short HEAD)
            version="unstable-$date.r${count}.$commit"
            package_version="$date.r${count}.$commit"
          fi
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Get the filename
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOAMD64\"].friendlyName" -r < install/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, RELEASE_NAME: $_NAME"
          echo "BUNDLE_NAME=daed-$_NAME" >> $GITHUB_OUTPUT

      - name: Download artifact - web
        uses: actions/download-artifact@v4
        with:
          name: web
          path: dist/

      - name: make
        run: |
          mkdir -p ./bundled/
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          export GOFLAGS="-trimpath -modcacherw"
          export OUTPUT=bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }}
          make
          cp ./install/daed.service ./bundled/
          curl -L -o ./bundled/geoip.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geoip.dat
          curl -L -o ./bundled/geosite.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geosite.dat

      - name: Upload artifact - bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_filename.outputs.BUNDLE_NAME }}
          path: bundled/*

      - name: Smoking test
        if: matrix.goarch == 'amd64' && matrix.goamd64 == 'v1'
        run: ./bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }} --version

      - name: Build Linux packages
        run: |
          sudo apt install -y libarchive-tools rpm
          sudo gem install fpm -v 1.15.1
          pushd bundled || exit 1
          for package_manager in deb rpm pacman; do
            case "$package_manager" in
              pacman)
                if [ "$GOARCH" == "arm" ] && [ "$GOARM" == "7" ]; then
                  package_arch='arm7hf'
                elif [ "$GOARCH" == "arm64" ]; then
                  package_arch='aarch64'
                else
                  package_arch="$GOARCH"
                fi
                ;;
              rpm)
                if [ "$GOARCH" == "arm" ] && [ "$GOARM" == "7" ]; then
                  package_arch='armhfp'
                elif [ "$GOARCH" == "arm64" ]; then
                  package_arch='aarch64'
                else
                  package_arch="$GOARCH"
                fi
                ;;
              deb)
                if [ "$GOARCH" == "arm" ] && [ "$GOARM" == "7" ]; then
                  package_arch='armhf'
                else
                  package_arch="$GOARCH"
                fi
                ;;
            esac
            fpm -s dir -t "$package_manager" -a $package_arch --version "$PACKAGE_VERSION" \
              --url 'https://github.com/daeuniverse/dae' --description "daed, A Modern Dashboard For dae." \
              --maintainer "daed@dae.v2raya.org" --name daed --license 'MIT AGPL' \
              --package daed-linux-$GOARCH$GOAMD64$GOARM.$package_manager \
              --after-install ../install/package_after_install.sh \
              --after-remove ../install/package_after_remove.sh \
              ./geoip.dat=/usr/share/daed/geoip.dat ./geosite.dat=/usr/share/daed/geosite.dat \
              ./daed.service=/usr/lib/systemd/system/daed.service \
              ./${{ steps.get_filename.outputs.BUNDLE_NAME }}=/usr/bin/daed
          done
          popd || exit 1
